name: Rust

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: khonsulabs/build-rust:latest
      options: "--security-opt seccomp=unconfined"

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Build
        env:
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
          NCOG_CLIENT_ENCRYPTION_KEY: ${{ secrets.NCOG_CLIENT_ENCRYPTION_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.GAC_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.GAC_SECRET_KEY }}
          SCCACHE_BUCKET: khonsulabs-gac
          RUSTC_WRAPPER: /root/.cargo/bin/sccache cargo build
        run: |
          echo "DATABASE_URL=postgres://postgres:postgres@postgres:$POSTGRES_PORT/postgres" >> .env

          cargo run --bin migrator --release

          cd webapp
          sed -i s/CACHEBUSTER/`uuidgen`/g static/index.html
          sed -i s/CACHEBUSTER/`uuidgen`/g main.js
          cargo make build -p release
          cd ..
          cargo build --package server --release

      - name: Run tests
        run: cargo test --release --verbose
        env:
          NCOG_CLIENT_ENCRYPTION_KEY: ${{ secrets.NCOG_CLIENT_ENCRYPTION_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.GAC_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.GAC_SECRET_KEY }}
          SCCACHE_BUCKET: khonsulabs-gac

      - name: Configure Production
        if: github.ref == 'refs/heads/production'
        env:
          DOTENVFILE: ${{ secrets.DOTENVFILE }}
        run: echo "$DOTENVFILE" > .env

      - uses: kciter/aws-ecr-action@v1
        if: github.ref == 'refs/heads/production'
        with:
          access_key_id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.ECR_SECRET_KEY }}
          account_id: 312192918111
          repo: khonsulabs/ncog
          region: us-east-1
          tags: latest,sha-${{ github.sha }}

      - name: Deploy SPA
        if: github.ref == 'refs/heads/production'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ECR_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_SECRET_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          aws s3 sync webapp/static/ s3://ncog-releasesbucket-hvnlnyp4xejx
          aws s3 cp webapp/static/pkg/webapp_bg.wasm s3://ncog-releasesbucket-hvnlnyp4xejx/pkg/webapp_bg.wasm --content-type "application/wasm"
          aws cloudfront create-invalidation --distribution-id E2RBPV8J4SLHOW --paths "/*"

      - name: Deploy API
        if: github.ref == 'refs/heads/production'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ECR_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_SECRET_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          aws cloudformation wait stack-update-complete --stack-name ncog
          aws cloudformation update-stack --stack-name ncog --use-previous-template --capabilities CAPABILITY_NAMED_IAM --parameters ParameterKey=VpcId,UsePreviousValue=true ParameterKey=PrivateSubnetIds,UsePreviousValue=true ParameterKey=PublicSubnetIds,UsePreviousValue=true ParameterKey=DeployedTag,ParameterValue=sha-${{ github.sha }}
