Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC for this deployment
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Two subnets that do not require public IP addresses
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Two subnets that are public-facing for the load balancer
  DeployedTag:
    Type: String
    Description: The tag of the image inside of the ECR to deploy. If not specified, ECS tasks are not deployed
    Default: ""

Conditions:
  deployEcsTasks: !Not [!Equals [!Ref DeployedTag, ""]]

Resources:
  taskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ncog ECS Tasks"
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref loadBalancerSecurityGroup
          IpProtocol: tcp
          FromPort: 7878
          ToPort: 7878
      VpcId: !Ref VpcId

  rdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ncog-rds-sg
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref taskSecurityGroup
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp

  rdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: ncog
      SubnetIds: !Ref PrivateSubnetIds

  rdsInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 14
      DBInstanceClass: db.t2.medium
      DBSubnetGroupName: !Ref rdsSubnetGroup
      DBName: ncog
      Engine: postgres
      EngineVersion: "9.6"
      MasterUsername: ncog
      MasterUserPassword: "{{resolve:ssm-secure:ncog-rds-password:1}}"
      MultiAZ: true
      Port: 5432
      StorageEncrypted: true
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref rdsSecurityGroup

  ecrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "khonsulabs/ncog"
      # RepositoryPolicyText:
      #   Version: "2012-10-17"
      #   Statement:
      #     - Sid: AllowPull
      #       Effect: Allow
      #       Principal:
      #         AWS: !Ref AllowedPullRoles
      #       Action:
      #         - "ecr:GetAuthorizationToken"
      #         - "ecr:BatchCheckLayerAvailability"
      #         - "ecr:BatchGetImage"
      #         - "ecr:GetDownloadUrlForLayer"

  releasesBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
  releasesBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref releasesBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              - !Join ["/", [!GetAtt [releasesBucket, Arn], "*"]]
            Principal: "*"

  releasesCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName:
              !Join [
                ".",
                [!Ref releasesBucket, "s3-website.us-east-1.amazonaws.com"],
              ]
            Id: s3
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: "/index.html"
            ErrorCachingMinTTL: 0
        CacheBehaviors:
          - PathPattern: "*/index.html"
            MaxTTL: 0
            DefaultTTL: 0
            MinTTL: 0
            TargetOriginId: s3
            ForwardedValues:
              QueryString: true
            ViewerProtocolPolicy: redirect-to-https
        DefaultCacheBehavior:
          TargetOriginId: s3
          ForwardedValues:
            QueryString: true
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        DefaultRootObject: index.html
        ViewerCertificate:
          AcmCertificateArn: !Ref certificate
          SslSupportMethod: sni-only
        Aliases:
          - "ncog.id"

  assetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html

  assetsBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref assetsBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              - !Join ["/", [!GetAtt [assetsBucket, Arn], "*"]]
            Principal: "*"

  ecrDeploymentUser:
    Type: AWS::IAM::User
    Properties:
      UserName: "ncog-deploy-user"
      Path: "/deploy/"
      Policies:
        - PolicyName: "ncog-deploy-policy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource:
                  - !GetAtt [ecrRepository, Arn]
              - Effect: "Allow"
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                Resource:
                  - !Ref AWS::StackId
              - Effect: "Allow"
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Join ["/", [!GetAtt [releasesBucket, Arn], "*"]]
                  - !GetAtt [releasesBucket, Arn]
              - Effect: "Allow"
                Action:
                  - cloudfront:CreateInvalidation
                Resource:
                  - !Join [
                      "",
                      [
                        "arn:aws:cloudfront::",
                        !Ref "AWS::AccountId",
                        ":distribution/",
                        !Ref releasesCloudFront,
                      ],
                    ]

  executingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ncogExecutionPolicy
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource:
                  - "*"
              - Effect: "Allow"
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !GetAtt [taskLogGroup, Arn]

  ecsCluster:
    Condition: deployEcsTasks
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ncog

  taskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: ncog
      RetentionInDays: 14

  taskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ncog-task-execution-role
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Join ["/", [!GetAtt [releasesBucket, Arn], "*"]]
                  - !GetAtt [releasesBucket, Arn]
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Join ["/", [!GetAtt [assetsBucket, Arn], "*"]]
                  - !GetAtt [assetsBucket, Arn]

  ecsTask:
    Condition: deployEcsTasks
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: ncog-server
          Essential: true
          Image:
            !Join [
              "",
              [
                !Ref "AWS::AccountId",
                ".dkr.ecr.",
                !Ref "AWS::Region",
                ".amazonaws.com/khonsulabs/ncog:",
                !Ref DeployedTag,
              ],
            ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref taskLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: server
          PortMappings:
            - ContainerPort: 7878
              HostPort: 7878
              Protocol: tcp
      Cpu: 256
      Family: ncog
      ExecutionRoleArn: !GetAtt [executingRole, Arn]
      Memory: 512
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt [taskRole, Arn]
      RequiresCompatibilities:
        - FARGATE
        - EC2

  ecsService:
    Condition: deployEcsTasks
    Type: AWS::ECS::Service
    DependsOn:
      - httpsListener
    Properties:
      Cluster: !Ref ecsCluster
      DesiredCount: 2
      TaskDefinition: !Ref ecsTask
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: !Ref PrivateSubnetIds
          SecurityGroups:
            - !Ref taskSecurityGroup
      LoadBalancers:
        - ContainerName: ncog-server
          ContainerPort: 7878
          TargetGroupArn: !Ref targetGroup

  loadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ncog Load Balancer Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: "0.0.0.0/0"
          FromPort: 443
          ToPort: 443

  loadBalancer:
    Condition: deployEcsTasks
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ncog-lb
      Scheme: internet-facing
      Subnets: !Ref PublicSubnetIds
      SecurityGroups: [!Ref loadBalancerSecurityGroup]

  certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "ncog.id"
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - "api.ncog.id"

  httpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: deployEcsTasks
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref targetGroup
      LoadBalancerArn: !Ref loadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref certificate

  targetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: deployEcsTasks
    Properties:
      Port: 7878
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckPath: "/__healthcheck"
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
